#!/opt/conda/bin/python

from __future__ import print_function

import os
import json
import pickle
import sys
import traceback

#import pandas as pd
import sklearn
import xgboost
from xgboost import Booster
import joblib

# These are the paths to where SageMaker mounts interesting things in your container.

prefix = '/opt/ml/'

model_name = 'us-trademark-notice-xgboost-20200313.pickle'

input_path = prefix + 'input/data'
output_path = os.path.join(prefix, 'output')
model_path = os.path.join(prefix, 'model')
param_path = os.path.join(prefix, 'input/config/hyperparameters.json')

# This algorithm has a single channel of input data called 'training'. Since we run in
# File mode, the input files are copied to the directory specified here.
channel_name='training'
training_path = os.path.join(input_path, channel_name)

# The function to execute the training.
def train():
    print('Starting the training.')
    try:
        # Read in any hyperparameters that the user passed with the training job
        with open(param_path, 'r') as tc:
            trainingParams = json.load(tc)

        # Take the set of files and read them all into a single pandas dataframe
        input_files = [os.path.join(training_path, file) for file in os.listdir(training_path)]
        print('loading model')
        #print(input_files)
        #print(os.path.join(training_path, model_name))
        clf = pickle.load(open(os.path.join(training_path, model_name), "rb"))
        print('loaded model')
        pickle.dump(clf, open(os.path.join(model_path, 'model.pkl'), 'wb'))
        print('saved model\ntraining complete!')
    except Exception as e:
        # Write out an error file. This will be returned as the failureReason in the
        # DescribeTrainingJob result.
        trc = traceback.format_exc()
        with open(os.path.join(output_path, 'failure'), 'w') as s:
            s.write('Exception during training: ' + str(e) + '\n' + trc)
        # Printing this causes the exception to be in the training job logs, as well.
        print('Exception during training: ' + str(e) + '\n' + trc, file=sys.stderr)
        # A non-zero exit code causes the training job to be marked as Failed.
        sys.exit(255)

if __name__ == '__main__':
    train()

    # A zero exit code causes the job to be marked a Succeeded.
    sys.exit(0)
